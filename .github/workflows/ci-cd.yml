name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: 3.10

      # Cache dependencies
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Run linting
      - name: Run linting with flake8
        run: |
          pip install flake8
          flake8 **/*.py --max-line-length 88

      # Run unit tests
      - name: Run unit tests
        run: |
          pip install pytest
          pytest --disable-warnings --maxfail=1

  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Deploy Streamlit App
      - name: Deploy Streamlit App
        env:
          STREAMLIT_EMAIL: ${{ secrets.STREAMLIT_EMAIL }}
          STREAMLIT_PASSWORD: ${{ secrets.STREAMLIT_PASSWORD }}
        run: |
          pip install streamlit
          streamlit run streamlit_app.py --server.enableCORS false --server.port ${{ secrets.STREAMLIT_PORT }}
